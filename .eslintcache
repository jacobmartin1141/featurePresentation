[{"C:\\Users\\Jacob's Computer\\Documents\\CODE\\FINAL CAPSTONE\\appmain\\src\\index.js":"1","C:\\Users\\Jacob's Computer\\Documents\\CODE\\FINAL CAPSTONE\\appmain\\src\\App.js":"2","C:\\Users\\Jacob's Computer\\Documents\\CODE\\FINAL CAPSTONE\\appmain\\src\\ContextMenu.jsx":"3","C:\\Users\\Jacob's Computer\\Documents\\CODE\\FINAL CAPSTONE\\appmain\\src\\AppWorkspace.jsx":"4","C:\\Users\\Jacob's Computer\\Documents\\CODE\\FINAL CAPSTONE\\appmain\\src\\findValidContainer.jsx":"5","C:\\Users\\Jacob's Computer\\Documents\\CODE\\FINAL CAPSTONE\\appmain\\src\\About.jsx":"6","C:\\Users\\Jacob's Computer\\Documents\\CODE\\FINAL CAPSTONE\\appmain\\src\\Header.jsx":"7","C:\\Users\\Jacob's Computer\\Documents\\CODE\\FINAL CAPSTONE\\appmain\\src\\UpdatesRevolver.jsx":"8","C:\\Users\\Jacob's Computer\\Documents\\CODE\\FINAL CAPSTONE\\appmain\\src\\Article.jsx":"9","C:\\Users\\Jacob's Computer\\Documents\\CODE\\FINAL CAPSTONE\\appmain\\src\\Footer.jsx":"10","C:\\Users\\Jacob's Computer\\Documents\\CODE\\FINAL CAPSTONE\\appmain\\src\\Updates.jsx":"11"},{"size":219,"mtime":1619665927962,"results":"12","hashOfConfig":"13"},{"size":2353,"mtime":1621460404913,"results":"14","hashOfConfig":"13"},{"size":3864,"mtime":1621638364581,"results":"15","hashOfConfig":"13"},{"size":20728,"mtime":1621707693251,"results":"16","hashOfConfig":"13"},{"size":532,"mtime":1620918955083,"results":"17","hashOfConfig":"13"},{"size":2945,"mtime":1621708376543,"results":"18","hashOfConfig":"13"},{"size":1703,"mtime":1621638794723,"results":"19","hashOfConfig":"13"},{"size":3031,"mtime":1621363629618,"results":"20","hashOfConfig":"13"},{"size":918,"mtime":1621642006328,"results":"21","hashOfConfig":"13"},{"size":252,"mtime":1621638945621,"results":"22","hashOfConfig":"13"},{"size":805,"mtime":1621639127173,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"j6memy",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\Jacob's Computer\\Documents\\CODE\\FINAL CAPSTONE\\appmain\\src\\index.js",[],["48","49"],"C:\\Users\\Jacob's Computer\\Documents\\CODE\\FINAL CAPSTONE\\appmain\\src\\App.js",[],"C:\\Users\\Jacob's Computer\\Documents\\CODE\\FINAL CAPSTONE\\appmain\\src\\ContextMenu.jsx",[],"C:\\Users\\Jacob's Computer\\Documents\\CODE\\FINAL CAPSTONE\\appmain\\src\\AppWorkspace.jsx",["50"],"import React, {\r\n    useState,\r\n    useEffect,\r\n    useRef,\r\n} from 'react';\r\n\r\nimport ContextMenuGenerator from './ContextMenu';\r\n\r\nimport createValidator from './findValidContainer';\r\n\r\nconst validTargets = [\r\n    \"box\",\r\n    \"work-space\",\r\n];\r\nconst findValidContainer = createValidator(validTargets);\r\n\r\nvar offset_data; //Global variable as Chrome doesn't allow access to event.dataTransfer in dragover\r\nvar dm;\r\nvar dropTarget;\r\n\r\nfunction findParentPos(target) {\r\n    let result = {\r\n        left: 0,\r\n        top: 0,\r\n        depth: 0,\r\n    };\r\n    var p = target;\r\n    for(let x = 1; validTargets.includes(p.className); x++) {\r\n        result.depth = x;\r\n        \r\n        result.left += parseInt(p.style.left,10);\r\n        result.top += parseInt(p.style.top,10);\r\n        \r\n        // console.log(p);\r\n        p = p.parentElement;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction drag_start(event) {\r\n    dm = event.target;\r\n    \r\n    let pOffset = findParentPos(dm);\r\n\r\n    offset_data = (\r\n        (pOffset.left \r\n            - event.pageX\r\n        ) +\r\n        ',' +\r\n        (pOffset.top\r\n            - event.pageY\r\n        )\r\n    );\r\n    event.dataTransfer.setData(\"text/plain\",offset_data);\r\n}\r\nfunction drag_over(event) {\r\n    dropTarget = findValidContainer(event.target);\r\n\r\n    if(dropTarget) {\r\n        dm.style.display = \"none\";\r\n\r\n        if(dropTarget !== dm) {\r\n            event.preventDefault(); \r\n            return false;\r\n        }\r\n    } else {\r\n        dm.style.display = '';\r\n    }\r\n}\r\n\r\nfunction BasicContainer({id, xPos = 0, yPos = 0}) {\r\n    const displayForm = () => {\r\n        setDisplay({element: <form onClick={displayName}>\r\n            <textarea\r\n                width=\"300px\"\r\n                height=\"150px\"\r\n                id='name'\r\n                name='name'\r\n                onChange={changeHandler}\r\n                autoFocus={true}\r\n                required={true}\r\n                placeholder='Click to Save'\r\n            ></textarea>\r\n        </form>, text: displayRef.current.text});\r\n    }\r\n\r\n    const displayInit = {element: <h3 onClick={displayForm}>New Container</h3>, text: \"New Container\"}\r\n    const [display, setDisplay] = useState(displayInit);\r\n    const displayRef = useRef({});\r\n    displayRef.current = display;\r\n\r\n    const changeHandler = (event) => {\r\n        if(event.target.value) {\r\n            setDisplay({element: displayRef.current.element, text: event.target.value});\r\n        } else {\r\n            setDisplay({element: displayRef.current.element, text: \"New Container\"});\r\n        }\r\n    }\r\n\r\n    const displayName = (event) => {\r\n        setDisplay({element: <h3 onClick={displayForm}>{displayRef.current.text}</h3>, text: displayRef.current.text});\r\n    }\r\n    \r\n    return(<div\r\n            id={id}\r\n            className=\"box\"\r\n            style={{\r\n                position: 'absolute',\r\n                left: xPos + 'px',\r\n                top: yPos + 'px',\r\n                height: '150px',\r\n                width: '300px',\r\n                zIndex: '1',\r\n            }}\r\n            draggable={true}\r\n            onDragStart={drag_start}>\r\n        {displayRef.current.element}\r\n    </div>);\r\n}\r\n\r\nfunction BasicLine({rootEl, connEl}) {\r\n    const rootPos = findParentPos(rootEl);   \r\n    const connPos = findParentPos(connEl);\r\n\r\n    return(<line\r\n        x1={rootPos.left + (parseInt(rootEl.style.width,10) / 2)}\r\n        y1={rootPos.top + (parseInt(rootEl.style.height,10) / 2)}\r\n        x2={connPos.left + (parseInt(connEl.style.width,10) / 2)}\r\n        y2={connPos.top + (parseInt(connEl.style.height,10) / 2)}\r\n        stroke=\"black\"\r\n        strokeWidth='0.2vh'\r\n    />);\r\n}\r\n\r\nfunction generateTestContainers(num) {\r\n    return [...Array(num).keys()].map((id) => {\r\n        return <BasicContainer id={id + 1} xPos={(id * 10) - (Math.floor(id / 324) * 324 * 10)} yPos={Math.floor(id / 324) * 10} />;\r\n    });\r\n}\r\n\r\nfunction generateTestConnections(num) {\r\n    return [...Array(num - 1).keys()].map((id) => {\r\n        return( {root: (id + 1), connects: (id + 2)} );\r\n    });\r\n}\r\n\r\nfunction Home() {\r\n    const stateInit = {\r\n        history: [],\r\n        availableIDs: [],\r\n        containers: [\r\n            ...generateTestContainers(10)\r\n        ],\r\n        connections: [\r\n            ...generateTestConnections(2)\r\n        ],\r\n        lines: [],\r\n        displayLines: [],\r\n        tool: {\r\n            selected: 'Create/ Delete Connections',\r\n            data: null,\r\n            cursor: 'cell',\r\n        },\r\n    }\r\n    const [state, setState] = useState(stateInit);\r\n    const stateRef = useRef({});\r\n    stateRef.current = state;\r\n    \r\n    useEffect(() => {\r\n        console.log(\"IDS\", stateRef.current.availableIDs);\r\n    }, [stateRef.current.containers]);\r\n\r\n    useEffect(() => {\r\n        //Memory optimizing system. Deleted containers don't shift the containers array immediately, instead they get queued\r\n        // const interval = setInterval(() => {\r\n        //     const containerProxy = stateRef.current.containers;\r\n\r\n        //     const availableIdsLength = stateRef.current.availableIDs.length\r\n            \r\n        //     if(availableIdsLength === 0) return;\r\n            \r\n        //     const emptyIndex = (stateRef.current.availableIDs[0] - 1);\r\n            \r\n        //     if(emptyIndex === availableIdsLength) return;\r\n\r\n        //     const targetItem = containerProxy[emptyIndex + 1];\r\n\r\n        //     let preCont = containerProxy.slice(0, emptyIndex);\r\n        //     let postCont = containerProxy.slice(emptyIndex + 1);\r\n\r\n\r\n        //     if(emptyIndex + 1 === availableIdsLength) {\r\n        //         setState({\r\n        //             ...stateRef.current,\r\n        //             containers: [...preCont],\r\n        //             availibleIds: [...stateRef.current.availableIDs.splice(0, 1)],\r\n        //         });\r\n                \r\n        //     }\r\n        //     console.log(\"before\", preCont);\r\n\r\n        //     preCont = [...preCont, targetItem];\r\n\r\n        //     console.log(\"after\", preCont);\r\n\r\n        //     preCont = [...preCont, ...postCont]\r\n\r\n        //     console.log(\"again after\", preCont);\r\n\r\n        //     setState({\r\n        //         ...stateRef.current,\r\n        //         containers: [...preCont],\r\n        //         availibleIds: [(emptyIndex + 1), ...stateRef.current.availableIDs.splice(0, 1)],\r\n        //     });\r\n\r\n        // }, 1000);\r\n        // return () => clearInterval(interval);\r\n    }, [stateRef.current.availableIDs]);\r\n\r\n    useEffect(() => {\r\n        generateLines();\r\n    }, [stateRef.current.connections]);\r\n\r\n    function deleteConnections(ID) {\r\n        const newConnections = stateRef.current.connections.filter((conn) => {\r\n            console.log(ID, conn, [conn.root, conn.connects].includes(ID));\r\n            if ([conn.root, conn.connects].includes(ID)) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }, []);\r\n\r\n        setState({...stateRef.current, connections: [...newConnections] } );\r\n        generateLines();\r\n    }\r\n    function createConnection(ID, targetID) {\r\n        let found = false;\r\n        const newConnections = stateRef.current.connections.filter((conn) => {\r\n            const filter = (!([ID, targetID].includes(conn.root) && [ID, targetID].includes(conn.connects)));\r\n            if(!filter) found = true;\r\n            return filter;\r\n        });\r\n\r\n        \r\n        if(!found) {\r\n            const newConnection = {\r\n                root: ID,\r\n                connects: targetID\r\n            };\r\n            \r\n            setState({...stateRef.current, connections: [...stateRef.current.connections, newConnection] } );\r\n        } else {\r\n            setState({...stateRef.current, connections: [...newConnections] } );\r\n        }\r\n    }\r\n\r\n    function generateLines() {\r\n        let newLines = [];\r\n\r\n        stateRef.current.connections.forEach((connection) => {\r\n            \r\n            const rootEl = document.getElementById(connection.root);\r\n            const connEl = document.getElementById(connection.connects);\r\n\r\n            const newLine = <BasicLine rootEl={rootEl} connEl={connEl}/>\r\n\r\n            \r\n            const rootPos = findParentPos(rootEl);   \r\n            const connPos = findParentPos(connEl);\r\n\r\n            const bottom = Math.max(\r\n                connPos.top + (parseInt(connEl.style.height,10) / 2),\r\n                rootPos.top + (parseInt(rootEl.style.height,10) / 2)\r\n            );\r\n            const right = Math.max(\r\n                connPos.left + (parseInt(connEl.style.width,10) / 2),\r\n                rootPos.left + (parseInt(rootEl.style.width,10) / 2)\r\n            );\r\n\r\n            const layer = parseInt(rootEl.style.zIndex,10) - 1;\r\n            if(newLines[layer] !== undefined) {\r\n\r\n                newLines[layer] = {\r\n                    right: Math.max(right, newLines[layer].right),\r\n                    height: Math.max(bottom, newLines[layer].height),\r\n                    lines: [...newLines[layer].lines, newLine],\r\n                };\r\n            } else {\r\n                \r\n                newLines = [...newLines, {lines: [newLine], height: bottom, right: right }];\r\n            }\r\n        });\r\n\r\n        const displayLines = newLines.map((layer, index) => {\r\n            return <svg\r\n            style={{\r\n                position: 'absolute',\r\n                zIndex: (index * 2),\r\n                width: layer.right + 'px',\r\n                height: layer.height + 'px',\r\n                left: '0px',\r\n                top: '0px',\r\n            }}>\r\n                {layer.lines}\r\n            </svg>\r\n        });\r\n        \r\n        setState({...stateRef.current, displayLines: displayLines});\r\n    }\r\n\r\n    function createNewEvent(newEvent) {\r\n        setState({...stateRef.current, history: [...stateRef.current.history, newEvent], });\r\n    }\r\n\r\n    function moveContainer(container, target, xPos, yPos, manual = true) {\r\n        if(manual) {\r\n            const newEvent = {\r\n                eventType: \"move\",\r\n                container,\r\n                target,\r\n                xPos: container.style.left,\r\n                yPos: container.style.top,\r\n                parent: container.parentElement,\r\n            }\r\n\r\n            createNewEvent(newEvent);\r\n        }\r\n        \r\n        let pOffset = findParentPos(target);\r\n            \r\n        container.style.left = Math.max( (xPos - pOffset.left) , 11) + 'px';\r\n        container.style.top = Math.max( (yPos - pOffset.top) , 11) + 'px';\r\n        \r\n        container.style.zIndex = (pOffset.depth * 2) - 1;\r\n\r\n        // console.log(container.style.zIndex);\r\n\r\n        if(container.children.length === 1) {\r\n            container.style.height = (50 / pOffset.depth) * 3 + 'px';\r\n            container.style.width = (50 / pOffset.depth) * 6 + 'px';\r\n            container.style.fontSize = (5 / pOffset.depth) * 4 + 'px';\r\n        }\r\n        \r\n        \r\n        const childRightPos = parseInt(container.style.left,10) + parseInt(container.style.width,10);\r\n        if(childRightPos + 15 > parseInt(target.style.width,10)) {\r\n            target.style.width = childRightPos + 15 + 'px';\r\n        }\r\n\r\n        const childBottomPos = parseInt(container.style.top,10) + parseInt(container.style.height, 10);\r\n        if(childBottomPos + 15 > parseInt(target.style.height,10)) {\r\n            target.style.height = childBottomPos + 15 + 'px'\r\n        }\r\n\r\n\r\n        container.remove();\r\n        target.appendChild(container);\r\n        \r\n        generateLines();\r\n        // drawConnections();\r\n    }\r\n\r\n    function drop(event) {\r\n        var offset;\r\n        try {\r\n            offset = event.dataTransfer.getData(\"text/plain\").split(',');\r\n        }\r\n        catch(e) {\r\n            offset = offset_data.split(',');\r\n        }\r\n        \r\n        moveContainer(dm, dropTarget, (event.pageX + parseInt(offset[0],10)), (event.pageY + parseInt(offset[1],10)));\r\n\r\n        dm.style.display = \"\";\r\n\r\n        event.preventDefault();\r\n        return false;\r\n    }\r\n\r\n    const createContainer = (origin, target, event) => {\r\n        let newAvailableIDs = [];\r\n        let containerId\r\n        if(stateRef.current.availableIDs.length > 0) {\r\n            containerId = stateRef.current.availableIDs[0];\r\n\r\n            newAvailableIDs = stateRef.current.availableIDs.slice(1);\r\n\r\n            setState({...stateRef.current, availableIDs: [...newAvailableIDs],});\r\n\r\n        } else {\r\n            containerId = stateRef.current.containers.length + 1;\r\n        }\r\n \r\n        const newEvent = {\r\n            eventType: \"create\",\r\n            container: containerId,\r\n            xPos: origin.pageX,\r\n            yPos: origin.pageY,\r\n        }\r\n        createNewEvent(newEvent);\r\n\r\n        let newContainer = <BasicContainer id={containerId} xPos={origin.pageX} yPos={origin.pageY} />\r\n\r\n        setState({\r\n            ...stateRef.current,\r\n            containers: [...stateRef.current.containers, newContainer],\r\n            availableIDs: newAvailableIDs,\r\n        });\r\n    }\r\n\r\n    const deleteContainer = (origin, target, event) => {\r\n        const targetId = parseInt(target.id,10);\r\n\r\n        console.log(document.getElementById(targetId));\r\n\r\n        const newContainers = stateRef.current.containers.filter((cont, index) => {\r\n            const p = document.getElementById(cont.props.id);\r\n\r\n            if(parseInt(p.id,10) === targetId) {\r\n                console.log(index, p.id);\r\n\r\n            }\r\n\r\n            return(parseInt(p.id,10) !== targetId)\r\n        });\r\n\r\n        const newConnections = stateRef.current.connections.filter((conn) => {\r\n            if ([conn.root, conn.connects].includes(targetId)) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }, []);\r\n\r\n        \r\n        if(targetId !== stateRef.current.containers.length) {\r\n            setState({\r\n                ...stateRef.current,\r\n                availableIDs: [...stateRef.current.availableIDs, targetId],\r\n                containers: [...newContainers],\r\n                connections: [...newConnections] \r\n            });\r\n        } else {\r\n            setState({\r\n                ...stateRef.current,\r\n                containers: [...newContainers],\r\n                connections: [...newConnections]\r\n            });\r\n        }\r\n    }\r\n\r\n    const editContainerText = (origin, target, event) => {\r\n        for(let child of target.children) {\r\n            if(child.tagName.toLowerCase() === \"h3\") {\r\n                \r\n            }\r\n        }\r\n\r\n        // console.log(origin, target, event);\r\n    }\r\n\r\n    const setToolHandler = (origin, target, event) => {\r\n        let newCursor;\r\n            switch(event.target.innerText) {\r\n                case 'Create/ Delete Connections':\r\n                    newCursor = 'cell';\r\n                    break;\r\n                case 'Create Containers':\r\n                    newCursor = 'copy';\r\n                    break;\r\n                case 'Delete':\r\n                    newCursor = 'alias';\r\n                    break;\r\n                default:\r\n                    newCursor = '';\r\n        }\r\n\r\n        setState({...stateRef.current, tool: {...stateRef.current.tool, selected: event.target.innerText, data: null, cursor: newCursor}});\r\n    }\r\n\r\n    const connectionsTool = (origin, target, event) => {\r\n        if(target.className === 'box') {\r\n            if(stateRef.current.tool.data !== null) {   \r\n                if(stateRef.current.tool.data !== target) {\r\n                    console.log(stateRef.current.tool)\r\n                    console.log(\"creating connection!\");\r\n                    createConnection(parseInt(target.id, 10), parseInt(stateRef.current.tool.data.id, 10));\r\n                    \r\n                }\r\n                target.style.backgroundColor = '';\r\n    \r\n                const newState = {\r\n                    ...stateRef.current,\r\n                    tool: {\r\n                        ...stateRef.current.tool,\r\n                        data: null\r\n                    },\r\n                }\r\n                setState(newState);\r\n            \r\n            } else {\r\n                console.log(\"selecting first element!\")\r\n                setState({\r\n                    ...stateRef.current,\r\n                    tool: {\r\n                        ...stateRef.current.tool,\r\n                        selected: 'Create/ Delete Connections',\r\n                        data: target},\r\n                    });\r\n                target.style.backgroundColor = 'white';\r\n            }\r\n        }\r\n    }\r\n\r\n    window.addEventListener(\"DOMContentLoaded\", () => {\r\n        document.addEventListener('keydown', (event) => {\r\n            console.log(`Key: ${event.key} with keycode ${event.keyCode} has been pressed`);\r\n        });\r\n\r\n        document.addEventListener('click', (event) => {\r\n            const target = findValidContainer(event.target);\r\n\r\n            if(target) {\r\n                switch(stateRef.current.tool.selected) {\r\n                    case 'Create/ Delete Connections':\r\n                        connectionsTool(event, target);\r\n                        break;\r\n                    case 'Create Containers':\r\n                        createContainer(event, target);\r\n                        break;\r\n                    case 'Delete':\r\n                        deleteContainer(event, target);\r\n                        break;\r\n                    default:\r\n                        console.log(\"No tool selected!\");\r\n                }\r\n            }\r\n\r\n        });\r\n    });\r\n\r\n    const buttons = {\"work-space\": [\r\n            {text: 'Select Tool >', function: [\r\n                {text: 'None', function: setToolHandler},\r\n                {text: 'Create/ Delete Connections', function: setToolHandler},\r\n                {text: 'Create Containers', function: setToolHandler},\r\n                {text: 'Delete', function: setToolHandler},\r\n            ]},\r\n            {text: 'Create Container', function: createContainer},\r\n            {text: 'Edit Design >', function: [\r\n                {text: \"Select Preset >\",\r\n                function: [\r\n                    {text: \"Default\", function: () => {console.log(\"Default Design\")}},\r\n                    {text: \"Modern\", function: () => {console.log(\"Modern Design\")}},\r\n                ]},\r\n                {text: \"Create Custom Design >\",\r\n                function: [\r\n                    {text: \"Set Colors\", function: () => {console.log(\"Custom Colors\")}},\r\n                    {text: \"Option 2\", function: () => {console.log(\"Custom Colors\")}}\r\n                ]},\r\n            ]},\r\n        ],\r\n        \"box\": [\r\n            {text: \"Delete Container\", function: deleteContainer},\r\n            {text: \"Edit Container >\", function: [\r\n                {text: \"Edit Text\",\r\n                function: editContainerText},\r\n                {text: \"Edit Colors\",\r\n                function: () => {console.log(\"Edit Container Colors\")}\r\n                },\r\n            ]},\r\n            {text: \"Create Container\", function: createContainer}\r\n    ]};\r\n    \r\n    const exitHandler = (event) => {\r\n        if(window.confirm(\"Are you sure you want to exit? All unsaved progress will be lost!\")) {\r\n            window.location.href='/';\r\n        }\r\n    }\r\n\r\n    return(<div id='0' className=\"work-space\"\r\n        style={{\r\n            left: '0px',\r\n            top: '0px',\r\n            cursor: stateRef.current.tool.cursor,\r\n        }}\r\n        onDrop={drop}\r\n        onDragOver={drag_over}>\r\n\r\n            <div className=\"scb bottom container-fluid\">\r\n                {/* <div class=\"container-xl\"> */}\r\n                    <div class=\"row d-flex justify-content-between\">\r\n                        <button\r\n                            href=\"../public/index.html\"\r\n                            download\r\n                            class=\"col-3\">\r\n                                Download Layout\r\n                        </button>\r\n                        <button\r\n                            href=\"../public/index.html\"\r\n                            download\r\n                            class=\"col-3\">\r\n                                Save Layout\r\n                        </button>\r\n                        <div class=\"col-3\"/>\r\n                        <button\r\n                            onClick={exitHandler}\r\n                            class=\"col-2\">\r\n                            Exit App\r\n                        </button>\r\n                    </div>\r\n                {/* </div> */}\r\n            </div>\r\n    \r\n            {state.displayLines}\r\n            {state.containers}\r\n            \r\n            <ContextMenuGenerator buttons={buttons} />\r\n\r\n            {/* <canvas id=\"myCanvas\" zIndex='3' /> */}\r\n    </div>);\r\n}\r\n\r\nexport default Home;\r\n","C:\\Users\\Jacob's Computer\\Documents\\CODE\\FINAL CAPSTONE\\appmain\\src\\findValidContainer.jsx",[],"C:\\Users\\Jacob's Computer\\Documents\\CODE\\FINAL CAPSTONE\\appmain\\src\\About.jsx",[],"C:\\Users\\Jacob's Computer\\Documents\\CODE\\FINAL CAPSTONE\\appmain\\src\\Header.jsx",[],"C:\\Users\\Jacob's Computer\\Documents\\CODE\\FINAL CAPSTONE\\appmain\\src\\UpdatesRevolver.jsx",[],"C:\\Users\\Jacob's Computer\\Documents\\CODE\\FINAL CAPSTONE\\appmain\\src\\Article.jsx",[],"C:\\Users\\Jacob's Computer\\Documents\\CODE\\FINAL CAPSTONE\\appmain\\src\\Footer.jsx",[],"C:\\Users\\Jacob's Computer\\Documents\\CODE\\FINAL CAPSTONE\\appmain\\src\\Updates.jsx",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":225,"column":14,"nodeType":"57","messageId":"58","endLine":225,"endColumn":31},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"no-unused-vars","'deleteConnections' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]